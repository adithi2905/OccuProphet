# -*- coding: utf-8 -*-
"""Drift-detection-retraining.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yrLVtsR8Qygl7Y9OhjROxMv-aJWGLRvq
"""

import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import mean_absolute_error

def train_prophet_model(df, state_name):
    df['state'] = df['state'].str.upper()
    state_name = state_name.upper()

    state_df = df[df['state'] == state_name]
    if state_df.empty:
        print(f"No data found for state: {state_name}")
        return None

    if 'date' not in state_df.columns:
        print("'date' column missing in filtered data!")
        return None

    state_df = state_df[['date', 'occupancy_rate']].copy()
    state_df.rename(columns={'date': 'ds', 'occupancy_rate': 'y'}, inplace=True)
    state_df['ds'] = pd.to_datetime(state_df['ds'])

    model = Prophet(yearly_seasonality=True, daily_seasonality=False)
    model.fit(state_df)

    # Plot training data
    plt.figure(figsize=(12, 6))
    plt.plot(state_df['ds'], state_df['y'], marker='o')
    plt.title(f"Pre-COVID Occupancy Rates for {state_name}")
    plt.xlabel("Date")
    plt.ylabel("Occupancy Rate")
    plt.grid(True)
    plt.show()

    return model

def evaluate_model_on_post_covid(model, file, state_name):
    """
    Evaluate trained model on post-COVID data and plot results.
    """
    # Load post-COVID data
    df_post = pd.read_csv(file)

    # Normalize state names for consistency
    df_post['state'] = df_post['state'].str.upper()
    state_name = state_name.upper()

    # Filter for the selected state
    state_df = df_post[df_post['state'] == state_name]
    if state_df.empty:
        print(f"No data found for state: {state_name}")
        return None

    # Ensure 'date' column exists
    if 'date' not in state_df.columns:
        print("'date' column missing in post-COVID data!")
        return None

    # Prepare dataframe for Prophet
    state_df = state_df[['date', 'occupancy_rate']].copy()
    state_df.rename(columns={'date': 'ds', 'occupancy_rate': 'y'}, inplace=True)
    state_df['ds'] = pd.to_datetime(state_df['ds'])

    # Predict using the pre-trained model
    forecast = model.predict(state_df[['ds']])

    # Plot actual vs predicted
    plt.figure(figsize=(12, 6))
    plt.plot(state_df['ds'], state_df['y'], label='Actual', color='red')
    plt.plot(forecast['ds'], forecast['yhat'], label='Predicted', color='blue')
    plt.title(f"Prophet Model Evaluation on Post-COVID Data ({state_name})")
    plt.ylabel("Occupancy Rate")
    plt.xlabel("Date")
    plt.legend()
    plt.grid(True)
    plt.show()

    return df_post

from sklearn.metrics import mean_absolute_error

def detect_drift(df_pre, df_post, state_name):
    """
    Detect drift by comparing pre and post-COVID occupancy rates
    for a specific state. Triggers retraining if drift detected.
    """
    # Normalize state names for consistency
    df_pre['state'] = df_pre['state'].str.upper()
    df_post['state'] = df_post['state'].str.upper()
    state_name = state_name.upper()

    # Filter data for the given state
    df_pre_state = df_pre[df_pre['state'] == state_name]
    df_post_state = df_post[df_post['state'] == state_name]

    # Check for empty datasets
    if df_pre_state.empty or df_post_state.empty:
        print(f"No data available for state: {state_name}")
        return None

    # Simulate model predictions using pre-COVID mean
    pre_mean = df_pre_state['occupancy_rate'].mean()
    predictions = [pre_mean] * len(df_post_state)

    # Calculate baseline MAE (pre-COVID)
    pre_mae = mean_absolute_error(
        df_pre_state['occupancy_rate'],
        [pre_mean] * len(df_pre_state)
    )

    # Calculate current MAE (post-COVID)
    current_mae = mean_absolute_error(
        df_post_state['occupancy_rate'], predictions
    )

    # Define drift threshold (50% increase allowed)
    mae_threshold = pre_mae * 1.5

    if current_mae > mae_threshold:
        print(f"Drift Detected in {state_name}: MAE increased to {current_mae:.4f} (Threshold: {mae_threshold:.4f})")
        print("Initiating Model Retraining Pipeline...")
        model = retrain_prophet_model(df_pre, df_post, state_name)
        print("Model retrained and saved successfully.")
        plt.figure(figsize=(12, 6))
        plt.plot(state_df['ds'], state_df['y'], 'o', label='Actual Data')
        plt.plot(forecast['ds'], forecast['yhat'], label='Model Fit', color='blue')
        plt.fill_between(forecast['ds'], forecast['yhat_lower'], forecast['yhat_upper'],
                        color='blue', alpha=0.2, label='Confidence Interval')
        plt.title(f"Retrained Prophet Model Fit for {state_name}")
        plt.xlabel("Date")
        plt.ylabel("Occupancy Rate")
        plt.legend()
        plt.grid(True)
        plt.show()
        return model
    else:
        print(f"No significant drift detected for {state_name}. Model is still valid.")
        return None

import pickle
from prophet import Prophet

def retrain_prophet_model(pre_covid_df, post_covid_df, state_name):
    """
    Retrains Prophet model using combined pre-COVID and post-COVID data
    for a specific state and saves the retrained model as a pickle file.
    """
    # Normalize state names for consistency
    pre_covid_df['state'] = pre_covid_df['state'].str.upper()
    post_covid_df['state'] = post_covid_df['state'].str.upper()
    state_name = state_name.upper()

    # Combine pre and post-COVID datasets
    combined_df = pd.concat([pre_covid_df, post_covid_df], ignore_index=True)

    # Filter for the selected state
    state_df = combined_df[combined_df['state'] == state_name]
    if state_df.empty:
        print(f"No data found for state: {state_name}")
        return None

    # Prepare dataframe for Prophet
    if 'date' not in state_df.columns or 'occupancy_rate' not in state_df.columns:
        print(f"'date' or 'occupancy_rate' column missing in data for {state_name}")
        return None

    state_df = state_df[['date', 'occupancy_rate']].copy()
    state_df.rename(columns={'date': 'ds', 'occupancy_rate': 'y'}, inplace=True)
    state_df['ds'] = pd.to_datetime(state_df['ds'])

    # Retrain Prophet model
    print(f"Retraining Prophet model for {state_name} with combined dataset...")
    model = Prophet(yearly_seasonality=True, daily_seasonality=False)
    model.fit(state_df)

    # Save the retrained model as a pickle file
    filename = f"{state_name.lower()}_prophet_model.pkl"
    with open(filename, 'wb') as file:
        pickle.dump(model, file)
    print(f"Retrained model saved as {filename}")

    return model

df_pre=pd.read_csv("pre_covid_occupancy.csv")
model=train_prophet_model(df_pre,"TAMIL NADU")

df_post=evaluate_model_on_post_covid(model,"post_covid_occupancy.csv","TAMIL NADU")
model=detect_drift(df_pre,df_post,"TAMIL NADU")