# -*- coding: utf-8 -*-
"""Pre-covid-occupancy-dat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bTlJbvMfSJTQZhCSu6ckFaPtJpecGDkK
"""

import kagglehub
import pandas as pd
import shutil
import numpy as np

# Download latest version
path1 = kagglehub.dataset_download("dheerajmpai/hospitals-and-beds-in-india")

print("Path to dataset files:", path1)

statewise_data_path=path1+"/Hospitals_and_Beds_statewise.csv"
df=pd.read_csv(statewise_data_path)

df.head()

df_renamed=df.rename(columns={ 'Unnamed: 0': 'state',
    'PHC': 'phc',
    'CHC': 'chc',
    'SDH': 'sdh',
    'DH': 'dh',
    'Total': 'total_hospitals',
    'Unnamed: 6': 'total_beds'})

df_renamed.head()

import kagglehub
# Download latest version
path3 = kagglehub.dataset_download("sureshraj256/india-state-population")
path="/kaggle/input/india-state-population/state_wise_population__2019.csv"

print("Path to dataset files:", path3)
pop=pd.read_csv(path)

pop.head()

df_renamed['sdh'] = df_renamed['sdh'].fillna(0)
df_renamed['state']=df_renamed['state'].str.upper()
pop = pop.rename(columns={'State': 'state', 'total_population': 'population'})
pop['state']=pop['state'].str.upper()
df_renamed = df_renamed.merge(pop[['state', 'population']], on='state', how='left')

df_renamed['total_beds'] = pd.to_numeric(df_renamed['total_beds'], errors='coerce')
df_renamed['population'] = pd.to_numeric(df_renamed['population'], errors='coerce')
df_renamed = df_renamed.dropna(subset=['total_beds', 'population'])

df_renamed['beds_per_10k'] = df_renamed['total_beds'] / (df_renamed['population']/10000)

import numpy as np
import pandas as pd

# Create dataframe
states = [
    'Andaman and Nicobar Islands', 'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar',
    'Chandigarh', 'Chhattisgarh', 'Dadra and Nagar Haveli and Daman and Diu', 'Delhi', 'Goa',
    'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jammu and Kashmir', 'Jharkhand', 'Karnataka',
    'Kerala', 'Lakshadweep', 'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram',
    'Nagaland', 'Odisha', 'Puducherry', 'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana',
    'Tripura', 'Uttar Pradesh', 'Uttarakhand', 'West Bengal'
]

urban = ['Delhi', 'Maharashtra', 'Tamil Nadu', 'Karnataka', 'Telangana', 'West Bengal',
         'Gujarat', 'Kerala', 'Chandigarh', 'Goa', 'Puducherry']

rural = ['Bihar', 'Uttar Pradesh', 'Odisha', 'Jharkhand', 'Chhattisgarh', 'Madhya Pradesh',
         'Rajasthan', 'Assam', 'Arunachal Pradesh', 'Nagaland', 'Manipur', 'Meghalaya',
         'Mizoram', 'Tripura']

# Assigning occupancy rates
def assign_occupancy(state):
    if state in urban:
        return round(np.random.uniform(0.6, 0.7), 2)  # Urban: 60–70%
    elif state in rural:
        return round(np.random.uniform(0.35, 0.5), 2)  # Rural: 35–50%
    else:
        return round(np.random.uniform(0.45, 0.6), 2)  # Mixed: 45–60%

df_renamed['baseline_occupancy_rate'] = df_renamed['state'].apply(assign_occupancy)

# Preview
print(df_renamed)

df_renamed.to_csv("pre_covid_occupancy.csv", index=False)

#time-series data
urban_states=['DELHI', 'MAHARASHTRA', 'TAMIL NADU', 'KARNATAKA', 'TELANGANA',
                'WEST BENGAL', 'GUJARAT', 'KERALA', 'CHANDIGARH', 'GOA', 'PUDUCHERRY']
rural_states=['BIHAR', 'UTTAR PRADESH', 'ODISHA', 'JHARKHAND', 'CHHATTISGARH',
                'MADHYA PRADESH', 'RAJASTHAN', 'ASSAM', 'ARUNACHAL PRADESH',
                'NAGALAND', 'MANIPUR', 'MEGHALAYA', 'MIZORAM', 'TRIPURA']
date_range = pd.date_range(start='2018-01-01', end='2019-12-31', freq='MS')
rows = []
np.random.seed(42)

for _, row in df_renamed.iterrows():
    state = row['state']
    total_beds = row['total_beds']
    for date in date_range:
        # Assign base occupancy by state type
        if state in urban_states:
            base_occ = np.random.uniform(0.6, 0.7)
        elif state in rural_states:
            base_occ = np.random.uniform(0.35, 0.5)
        else:
            base_occ = np.random.uniform(0.45, 0.6)

        # Seasonal adjustment
        month = date.month
        if month in [11, 12, 1, 2]:  # Flu season
            base_occ += 0.1
        elif month in [5, 6]:  # Summer dip
            base_occ -= 0.05

        base_occ = min(max(base_occ, 0), 1)  # Clamp between 0 and 1
        occupied_beds = int(total_beds * base_occ)

        rows.append([state, date, total_beds, occupied_beds, base_occ])

# Create DataFrame
df_pre_covid = pd.DataFrame(rows, columns=['state', 'date', 'total_beds', 'occupied_beds', 'occupancy_rate'])
print(df_pre_covid.head())

df_renamed = df_renamed.merge(df_pre_covid[['occupancy_rate', 'occupied_beds','date','state']], on='state', how='left')

df_renamed

df_renamed.to_csv("pre_covid_occupancy.csv", index=False)

